"use strict";

const input = `(9 + 4 * 9 * 4) + 3 + 7 * 8
4 * 4 * (8 + 4 * 2 * 3 + (6 + 6 * 7 + 6) + (7 + 4 * 9 * 7 + 2))
6 + ((8 + 2) * (2 * 6 * 9 * 6 * 5)) + 5
9 * 6 + ((7 * 6 * 8 * 2 + 9 * 5) + (3 + 2 * 8 * 5 + 4) * 8 * 6 + 8 + 6) + 8 + (7 * (9 + 7 + 3 * 5 + 7 + 8) + (6 * 7 + 8 + 9 + 7) * 5 * (7 + 4 + 8 * 3) * (5 * 3 * 4 + 4)) + (9 * 9 + (2 + 8 * 8) * 4 + 4 * 5)
2 * (7 + 4 + 7 * (8 + 9) + 5 * 3) * 4 + (9 * 4 * 5)
(9 * 9 + 9 * 7 + (8 + 4 * 6) + (9 + 3 + 9 + 7 * 5 + 2)) * 3
9 * 7 + 4 + ((4 * 9) * 4 * (7 + 7 * 8 * 3) * (6 * 7 * 7 * 4 + 9 * 8)) * 4 * 8
4 + 9 * 2 + (2 + (6 * 5 * 6) + 3 * 4 + 6)
6 + 7 + (6 * (3 + 8 * 6 * 8) * (2 + 6 * 5 + 6 + 5) * (6 + 3 + 3 + 3 + 8 * 6)) * (9 * 2 * (8 + 6 * 3 + 8 * 9)) + 5
(7 * 8 + 3 * 2 * 8 * (7 * 6 + 3 * 4)) + (5 + 3 + 3 + 3 + (6 + 5 * 9 + 7 * 7 + 5)) + (7 * 9 * (5 * 9) + 3 + (3 * 3 * 4 * 9 * 3) + 5) + 6
6 * 4 * 4 + (6 * 7 + 5 * 6 * 5 * 5) + 6
(5 * 4 + (4 * 5 + 8 * 5 * 9 + 4) + 5 * 6) + 7 + 9 * 7 * 9 + 5
3 * 8 + 8 * (8 * 7 * 8 + (5 * 7 + 9)) * 5
4 * ((5 + 7 * 3 + 5) * 8 + 2 + (9 * 4)) + (2 * 2 * 7 * 5 * 2 * 4) * 4 * 5 * 6
3 + (7 * (8 + 4 * 4) * 2 * 3 * 6 * (7 * 8 + 8))
6 * 9 * 3 * (7 * 5 * 9 * (5 + 7 + 2 * 4 + 4 + 2))
4 + 9 + 9 + ((5 + 4 * 3 + 9 * 9 * 3) * (9 + 9)) * ((9 + 6) + 9 * (2 * 8 * 6) * (8 + 3 + 2 + 4 * 6 + 8)) + 4
((6 * 7) * 9 + 6 * 3 * 9) + 5 + (6 + (7 * 9 * 4)) * 6 * 8 + 6
(3 * 4 + 3 + 3 * (2 * 7 + 4 * 9)) + 5
(5 + (7 + 6) * (8 + 4 + 5 * 7 * 8)) + 3
(5 + (4 + 4 * 5 + 7 * 2)) * 2 + (9 + 5 * (9 * 7 + 3))
(9 * 6) + 9 + (6 * 9 + 2 * 3 + (2 * 3 + 6 + 5)) + 7
9 * 5 * 7 * (3 + 6 + 9 + 5) * 6 + (7 + (8 * 7))
2 * 9 * 7 + (6 * 5) * (4 + (2 + 8 + 9 + 9 * 6) * 4 * 6 * 5 + 4) + 4
5 + 9 + (5 * 9 + 6 + 3 + 8 * 9)
(2 + 6 + 3 + 2 * 6) + 3 * (3 * 2) + 2 * 6 + (2 * 8)
4 + ((4 * 9 + 4 + 4) + 2 + (3 + 2 + 6 + 2) + 8 + 8)
5 * 2 + ((3 + 2 * 7 + 3 + 6) + 7 * (7 + 9 + 9))
((9 + 6) * 7 * (4 + 2 * 9 * 9 * 5) + (5 + 5 + 8)) * 7 + 8 * 9
(3 * 6) + 3 + (6 + 9) + (7 * 4 + 8 * 8 + 2 * 4) + 9
(9 + 7 + 3 * 9 * 7) + ((9 * 7 * 6 + 8) * 4 * 6 * 8)
3 * ((8 + 9 + 8 * 3 + 2 * 8) * 8) * 4
5 * 3 + (7 + 4 + 2 + 4 + 7 + (2 * 5))
2 * 7 + 9 * 5 * (6 * (3 + 6 + 5 * 2 * 4) + (9 + 6 + 8 * 3 + 7)) * 2
6 * 8 * 9 * ((4 + 4 + 4 * 4 * 8) + (8 + 8 * 7 * 5 * 6) + 9 + 9 * 9 * 8)
4 * (8 * 8 * (2 + 9 * 3 * 3)) * 2 * (8 * 2 + (5 + 6))
5 + (2 * (6 + 4 + 5 * 3 * 3) + (9 + 7 * 4) * (5 + 6 * 5 + 9 + 6)) + (2 * (2 * 3 * 3 + 4) + 9 * 8 + 9) + 4 * 6 * (9 + 9 + 5 * (7 + 8 * 9 * 9 + 7) * 2)
3 * (3 + 2 * 9) * 5 + 7 + 5 + (3 + 5 + 2 * (2 * 4 * 5 + 7 * 7))
5 + 9 + 5 + 3 + (7 * 4 + 6 * 7) + 4
5 * (8 * 4 * 9 * 9 * 7 * 5) + 3 + 9
7 * (9 * 5 + (8 + 6 + 4)) + (7 * 7 + 8)
(8 * 7 * (5 * 2 + 8 + 9 * 9 + 5) + 8 + (6 * 3 * 5 + 6 + 2) * 4) * 2 + (9 * 3 * 5 * (7 * 7) + 5) * 4
((7 * 2 + 9) * 9 + (4 * 3 + 3) * 9 * 4) * 6 * (8 * 8 * (2 * 4 + 8 + 3 * 4 * 6) + 8)
3 + 8 * 7 + (4 + 8) + (5 + 2 + 8 + 9 + (5 * 7) + 9)
5 + 6 + 3 * 5 + 2 * 2
(4 * (2 + 3 * 2) * (7 * 2 * 7) + 4) + 4 * 7 + (9 * 3 * 4 * 6 + 9 + (2 + 5 + 2 * 7 + 7 * 3))
8 * 9 * 2 * 9 * (2 + 5) + 6
3 * 2
3 * 4 * ((4 + 5) + 2 * 9 * 5 * 3 * 7) + (6 + 4 + 2 + 6 * 8) + 3 * 9
2 * 4 + 8 + 6 * (6 * 6 + 2 * (2 + 8 * 7)) + 3
((4 + 2) * 4) * 4 * 4 * 5
((3 + 7) + 8 * (6 * 7 * 8)) * 3 * 4 * 3
(6 + 2 + 9 + 7 * 6) * (4 * 9 * 7 + 6) * (2 + 7 * 3) * 2 + 8
8 * 6 * 8 + (8 + 2 * (7 + 5 + 8 * 2 * 9) * (4 + 5 + 5 * 8) + 3) * 7
(4 * (2 * 9 * 7 + 5 * 5 * 7) + 7 + 3) + 6 + 6 * 3
7 * ((3 * 5 * 6) * (3 + 8 + 4) * (8 + 7 + 8 + 4 + 2 * 5)) * 8 * 6
9 * (4 * 4 + (8 + 6 + 9 + 9 * 3 + 2)) * 7 + 8
4 * 5 * (6 + (5 + 2 * 3 + 4)) + 5
(8 * 8 * 6 + (2 + 9 + 9 * 7 + 5) * 2) * (8 + 7) + (2 + 9 * 9 + 5 * (8 * 5 + 4 * 9)) * 4 * ((6 * 8) + 3 + 8 * 4 + (6 * 9 + 2) + (5 + 6 * 6))
(2 * (4 * 3 * 7) * 6 + 9 * 6) * 9
(3 + 5 + 4) + 4 * 4 * (5 + (4 + 5) + (4 + 5) + 5 + (5 * 4 + 7 * 6 + 2 + 4)) * 5
6 * 3 + (7 + 3 + 8 * 9 + 6 * 4) * 8
(8 + 3 + 8 * 3 + (7 * 6 + 8 + 7) * (6 * 2 + 9 * 9 * 7 + 8)) * 3
(3 * 3 * 4 + 2 + 7 * 8) * 8 * 2 + 4 * 6
7 * (7 * (6 * 6 * 3 * 4 * 9 * 2) + 6 + 5) * 9 + 2
(7 + 3 * 8 * (4 + 6 * 6 + 8 * 4)) * (9 * 5 + 2 * 3) * 5 + 5 * 6 * 7
4 + (2 + 9) * (5 + 3 + 8 + (3 + 7 + 3 + 7 * 9 + 3)) + 8 + (4 + 3 * (9 * 3)) * 9
((6 * 9 + 7 + 5 * 3) + 9 * 9 + 2 * 7) * 3 + 4 * 9
7 + (2 + 9 * 7 * 7 + (5 + 4 * 4 + 5 * 6 + 5)) + 4 + 5
9 * 5 * 2
(9 * (4 + 6 + 7 + 8 + 7) * (9 + 7 * 5 + 5 * 6) * 5 + (2 + 5 * 8 * 8 * 5)) * 2 + 9 * 8 + 7
(8 + 7 + 7 * 4 * 4 * (5 + 5 + 3)) + 9 + (9 * 7 + 5 + 3 * 3)
2 + ((8 * 2 + 8) * 8) * 8 + (5 + 2 + 4 * (3 * 9 * 7 * 7 + 5 + 7) + 9 + 7) * 5 + 8
(2 + 2 + 6) * ((3 * 2) * (9 + 5 + 3 + 3) + 9 * 8 * 7 + (9 * 7 + 3 * 7 * 5)) * 5 * 7 * 4
(7 + 3) + (5 + 3 * 9 + 6 + 8) * (6 * 8 + 7 + 2 * 9 + 3)
(7 + 6) + 5 * (9 * 5 * 9 + 3 * 8 + 6)
3 * 2 + 4
5 * 4 + 8 * 7 + 6
5 + 8 + (9 * 9)
9 * 4
9 + 9 * (6 * 4 + 2) * 6 + 7 + 4
(5 + 3 * 9) + 7 + 9 + ((5 + 5 * 7 + 9 * 2 * 3) + (8 + 4 * 7 + 7 + 3) * 7) + 5
5 * (7 * (4 * 3 + 8 + 8 + 5))
8 + 9 + ((8 * 8) + 4 + 3 * 3) + ((9 + 4) * (6 * 7 + 8 + 3 + 5) + (5 + 2 * 3) * 9 * 9) * 6
(3 + 4 * 2 + 7 + (4 * 4 * 5 * 4 * 7)) + (5 + 7) * 6
5 + 8 + 2 + 4 * (7 + 3) + (7 + (6 * 9 + 8 + 8) + (9 * 9 * 9 * 4 * 2) + 8)
3 + 8 * 4 + 3 * (8 * 4 * 6 + 4)
2 + 9 + 5 + 2
4 + 7 + 4 + (3 + 3 * 4 + 5) * 6 * (3 + 2 * 3)
(7 + (7 + 7 + 3 * 9 * 4 + 2) + 4) * 9 + 6
4 * 9 * 6 + (5 * 5 + 5 * 6 + 3 + (5 * 2 + 6 * 4 * 9)) * 4 + (2 + 4 * 4 * (9 + 9 * 5) * 5)
(7 * 5) * 9
(4 + 5 + 7) + (4 * 3 * 4 * 9) + (4 * 7 * 4) * 4 + 2
2 + 8 + 8 * 5 * ((5 * 4 + 9 * 4 + 9 + 5) * (7 + 5 * 6 + 5 * 8) + 4 * 6 + 6 + 2)
(4 + (2 * 3 + 8 * 3)) * 2
4 * 5 + 4 * ((8 + 6 + 4) + 3 * (5 + 3 + 9 * 2) + 6) + 6
2 * 6 * (7 + 4 + 6 * 7 * (2 * 9 * 9 * 4)) + 4
8 * (2 + (8 * 2 + 9) + (7 + 3) * 4 * 8) * (7 * (3 * 5 + 2 + 3)) * (3 * 4 + 5 * 6)
(3 + (6 * 4 + 8) * 5) * 9 + 4 * (4 * 7) * 6 * 4
(4 * (9 + 3) + 5 * 5 + 8 * 5) * (2 + 5)
(6 * (9 * 3 * 9 + 5 * 4) + 7 * 5) + 5 * (4 + 6 + 8) * 7 + 7 + 5
6 * (4 * 8 + 4) * (8 * 5)
(7 + 8 * 7) + 9 + 5 * 5 + 2
(3 * 7) + 7 + (9 + 6 * 5 + (4 + 4 * 7 + 4 * 4) * 9 * 2)
8 * (9 * 9 + 4) * 8 + 8 + 2 + 2
5 + 3 * 4 + 3 * 7 * (8 + (3 * 4 * 3))
2 + (8 + 2 + 5 * (4 + 2 + 5 + 6 * 7 * 6) + 6) + (7 * 3 * 3 * 2 + 2) + 8 * 9
6 * (9 + 2 * 6 + 8 + 6 * 3) + 8 * 6 * (2 * 2) * 6
(8 + (8 * 6 + 3 + 8) + (3 * 4 + 3) + 7 + 5) + (3 + (4 * 6 + 7 * 7) + 6 + 5 + 6)
(9 + 8) + 7 * (8 + 9 + 3 + 3 + 3) * 3 + 2 + (9 + 4 + 2)
5 * (8 + 7 + (9 + 9 * 8) + 7) + 8 + 7
((9 + 4 + 3 * 7) + 6) * 5 + 4 * 9
(8 + (3 * 4 + 9 + 9)) + 5 * 4
8 * 9 + 4 * 3 * (4 + 2 + (9 * 3 * 9 * 3) + 3)
5 + 3 * 8 * (9 * 9 + 4 * 8 * (5 + 6 + 4)) + (4 * 6 + 7 + 9 * (3 * 8)) * 2
8 + 6 * (4 + (4 * 7 * 4 + 8) + (9 + 3 + 4 * 9)) + 3 * 7
(6 * 7 * 3) + 7 + 4 * 2 * (4 + 6 * 5)
3 * (9 * 4 * 9 + 3 + 6 + (4 + 4 * 8)) + 8 * 9
(6 * 3 + (7 + 7 * 5 * 8 * 5)) * 8
3 * (5 + (8 + 3 * 7 * 9 * 7) + 5 + 8 * 2 + (6 * 5 * 2)) * 6 + 4 * 5 * 2
2 + 8 + 9 * 8 + 9 + (5 + (6 + 5 + 2 * 2 * 4) + 8 + 7 + 6)
3 + (8 * 4 + 5 + 7) * 6
4 * (7 * (5 * 2 + 3) + 8 * 9 * 9 + 2) + 7 + 2 + 2 + 3
9 + (8 * (8 + 4 + 7 + 4) + (2 * 5 * 7 * 2 + 5)) + 4 + 5 * (4 + 4 * 4) + 9
5 * 8 * (5 * 7 * 7 + 8 * (5 * 3) * 9)
7 + 3 + 3 * (6 * 3 * 6 * 5 * 6) * 5
9 + (9 + 6 * (2 + 4 * 7 + 2 * 8 * 6) + 4 + 7) + 9 + 6
8 * 6 + 2 + 8 + 9 * 5
(3 * 7 + 5 + (2 + 9 + 7 + 9) + 5) * 5 + 2 * 5 + 9
(2 * 8 * 8 + 7 + 8) * (6 + 9 + 7) * (7 * (9 * 2 + 3 + 7) * 8 * (2 * 2 * 5) + 5 + 5) * 2 + 7
7 + (8 + 7 + 4)
5 * 6 + ((5 * 5 * 8 + 8 * 4 * 7) * 4) * (6 * 8 + 6 * 4 + 7)
3 * 4 + 6 + 8
5 + 4 + (7 * 3 * 7 * 5 * 6 * 6) * 9 + 5
(6 * 4) * 5 + (9 + (9 + 8) + 4 + (7 * 5 + 3)) * 2 + 2
((7 + 6 * 3) + 6) + 3 + 3 * 7 * 4
2 * (9 + 4 * (9 * 7 + 2) + 8) * 3 + 3 * (3 + 5 * (3 + 8) * 2)
6 * 6 * (2 + 7 * (6 * 8 * 6 * 6 + 7)) + ((7 * 9) * (8 * 3 * 4 * 6 * 5))
4 + (7 * 7 * 8 * 8 * 5 + 3) + (8 * 7 + 6 * 6 * 9 + 5) + 7
6 + 3 * 8 + (5 * (5 * 7 * 6 + 7 * 2) + 9 + 8 + 3 * (2 + 5))
7 + 4 + 9 + (7 + 3) * 7 * 4
2 * (5 * 7 * 2 + 4 * 5) * 2 * 3 + (7 + 6 + 4 * 3 * 9)
6 + 6 + (6 + 8 * 6) + 4
4 + (5 + 9) * 6 * 3 * 9
(4 * (7 + 6 + 4 + 2 + 6 + 3)) + 3 * 8 + 4
3 * 7 * 3 + 8
(7 + (2 * 9 * 9 + 6)) * 4 + 3 * 3 + 2 + 8
4 + (8 + 3 * 7 * 9) + 9 * 4 + 6
(4 + (8 * 6 + 6 * 5 + 7 + 5) * (8 * 3 + 3)) + 6 + 5
((5 * 9 * 2 + 8 * 9) * 3 + 7) + 7 * (8 * 4) * 3 * 6
3 + 7 * 5 + (4 + 8 * 6 * 9)
7 + 2 * (6 * 7 * (3 * 8 + 5) + 3 * 7 + 9) * (8 + 8)
3 + 5 + (8 * (7 + 8 + 6 + 3 * 7) * (8 * 7 + 8 + 7 + 3 * 2)) + 4 + 7
3 * (2 * (8 * 3) * 9 + 8 * 4) + 2 * 2 + 4
9 + 4 + ((3 * 7 + 5 + 5 + 9) * 2 + 4 + 7 + 8) + 3 + 2 + (3 * 3)
6 * 7 * 4 * (9 + 6 * (7 * 6 * 8 + 5 + 9 + 2) + 7)
9 + (2 * 7 * 6 * 7 + (3 * 8 + 9) + 4) + 4
6 + (4 + 6)
(8 * 7) + 7 + 5
((3 + 6 + 3 + 7 * 5 * 3) + 3) + (8 + 2 * 6 * 8 + 6) + 2 * 7 * 5 * 4
(5 + (5 * 2 + 6)) + 8 * 3
2 + 8 + (8 + 2 * 9 * 9 + 5)
4 * (7 * 8 + 9 * 2 + 6) * 4 + (5 * (9 + 4 * 5 + 4) * 6) * 7
9 + 5 + (6 * (8 + 7 + 5 + 6 * 8) * 9 + (9 + 5 + 9 * 6 * 3) + (7 + 2 * 7 * 3))
(5 + 3 + 5 + 8) * ((7 + 7 * 4 + 9) * 5) * 3 + 5 * 2 * 5
4 * (3 + 3 + 8) * 6 + (2 * 5 + 9) + 3 + 9
6 + ((5 * 9 + 7 + 7) + 8 * 2 * 6 + 3) + 7 + (9 + 5 + (4 * 4 + 3 * 4 + 4) + 3 * (7 * 6 + 7) * 8) * 8 + 8
3 + 2 + 4 + ((9 * 7 * 6) + 8 * 8 * 2 * 9) * 9 + 4
3 + ((7 * 2 + 3 * 2) + 7 + (3 + 9 + 8 + 9 * 4) * 5 * 6)
9 + 4 * (8 + 2) * 6 + 2
3 + 9 * 9 * 4 * 3
(7 + 5 + (6 * 2 + 3 + 8 + 2 * 2) + (9 * 9 * 7) + 8 * 7) * 9 + 7 * 2
5 + 7 * (2 * 6 + 8 * 7 * (3 + 3 + 3 + 9)) + (4 + 3)
(8 * (6 + 3 * 6 * 3 * 2) + (4 * 7 * 5) * 5 * (6 + 3 * 5 * 4 + 8) + 9) + 9
5 * (6 * (7 + 2 + 3 + 9 * 6 * 2) * (3 * 9 * 4 + 4)) * 9 + 4 * 2
(3 * 5 + (6 + 3 * 7) * 9 + 5 + 7) + 2 + 4
(8 * 6 + 8 + 9 * 3 * 3) + 9 + 2
(7 * 2) * (6 * (3 + 2 * 8 * 4 + 7)) * 7 * 2
6 * ((5 + 8 * 7 * 8 * 6 * 8) * 2 * 4 * 6 * 5)
(7 + 6 * 3 + 9 + (6 + 6 + 3 * 7 * 5 * 3) + 8) * 3 + 4 * 9 * 4
2 + (7 + 5 + (3 * 5 * 9 + 2) + 8 * 5 + 5) * ((3 + 3 + 4 + 6) * 6 * 7) * (7 + (8 + 2 * 5) * 5 + 2 + 8) * 8
(2 + 5 + 4 + 8) * 6 + 9 * 3 * 5 * 4
(6 * 9 + 3 * 9 + 3) * 3 * (6 + 7 * 6 * 2 * 6) * 4 + 4 + 3
6 * 9 + 2 * (7 + 5) + (8 * 8 + 6)
7 + 7 + 7 + 7 * 8
(8 + 3) * 3 + ((9 * 2) * 4 * 8 + 4 * (9 * 2 * 4 * 5) * 7) * 5 * 2 * 9
8 * 7 * (5 + 4 + 5 + 2 + 6 + (5 * 6 + 2)) + 3 * 8 * 3
2 * 2 + 5 * (3 * (3 + 9) * 7) + 5
5 * 5 * 9 + (8 + (2 * 5) + 6 + 6)
(7 + 4) * 5 + 6 * 4
5 * 9 * (2 * 5 * 6)
(6 + (5 + 8) + 5 + 4 + 4 * 2) * 3
8 + (9 + 3 * 8 * 9)
((8 + 3) + 3 + (2 * 4) + 4 + 4) + 2 + 3 * 6 * 8
(3 * 2 + 4 * 6 + 7 * 4) * 3
8 + 2 * ((3 + 7) * 8 * 2) * 8 * 9
4 + 4 * 2 * ((4 + 3 + 4 + 2 + 2) * 2 * 4 * 7) * (9 + 3 + (8 * 5 * 6 + 3 * 3) * 4 + 2 * (9 * 4 * 4 + 3 + 7)) + (2 * 9 * (9 * 2 + 6 * 2) + 8 * 4)
2 * (8 * (3 * 7 * 2 + 9 + 5) * 2) * 7
((6 * 6 * 6 + 6) * (5 * 6) * 6) * 5 * 6
(6 * (2 + 2 * 9 * 3) * 6 + (9 * 8 + 9 + 7 * 4 * 7)) * 9
5 + (2 + (8 + 8 + 7 * 3 * 4) * 6 + (8 + 5 + 8 * 8 + 6 * 4) * (7 * 6)) * 2
8 + (2 * 4 + 6 + 6 * 4 * 3) + (7 * 8 * (7 * 4 * 8 * 8 * 2 * 2) + 9) * 5
((5 * 7 * 3 + 2 + 2) + (4 + 4 + 7) + (6 * 9 + 7 * 6)) + 9 + 5 * 3 + 3 * 6
((3 * 5 * 8) * 4) * (9 + 6 + 6 * 7 + 6) + 6 + 9 * (8 * 5 * (4 * 9 * 2 + 5 * 2 + 9) * 3) + 8
7 + 2 * 9 * (5 + (9 * 6 * 7 * 7 + 2) * (9 * 3 * 8 + 5 * 6) * 8 * 4) + 2
7 * 8 * 3 + 2 * 6 + 5
5 * 8 * 9 * ((2 + 6) * 5 * 4 * 2 * (2 + 3 + 9) * 6) * 5 * 6
8 * (8 + 8 + 6 + 8 * 8) * ((6 + 9 + 4 * 3 + 8 * 3) * (5 + 7 * 9 * 6 * 5 + 6)) + 5 + 2
9 * (7 * 6 * 8 * 4) * 6 + 5 + 6 + 2
(3 * 4 + 3 + 2) * (4 * 3 + 9 + 6 * 3) * 9
(8 + 4 * 2) * (8 * 6 * (8 * 9 * 6 + 4) * 4) + 4 + ((5 * 4 * 7 + 5) * 8 * 3) + 3
4 + 9 + 8 + (5 * 9 * (3 + 4 * 4 + 3))
(3 * 3 + 9 + 7 + 5) * (3 + 3) * 8 * 3 * 9
7 + 5 + 7 + ((4 + 4 + 3 + 4) + (7 * 8) * 6) * 8
((8 + 4) + 8 * 2 + 5) + 2 + (7 + 4) + 4 * (9 * (3 * 6 * 2) + 5)
7 + (3 * 2 * 8 * 6 + 9 + 4) * (7 + 6 + (6 + 7) * 5) * 4 + 5 + 4
3 * 3 + (7 + 2 * (5 + 3)) + (5 * (7 + 5 + 6 + 7 * 6 + 3)) + 7
8 + 9 * 5 * 5 * 5 * (5 + 6 * 4 * 6 * 7)
(4 + 5 * 8 * 4 + 4) * 3 * 7
7 + 6 + (5 * 6) * 3
4 + 6 * 4 * ((9 + 6 + 5) * 6 + 2 * 8 + 5 * (8 * 4 * 8)) * 9
3 + ((7 * 4 + 3 + 7) + 9 * 7) + (3 + 9) + (7 + 6 + 7 * 9 * 3) * 9 * 7
(4 * (2 * 4 * 4 * 4 * 8 + 3) + 3 * 6 * 3) * 6 * (7 * 8 + 2 * 8 * 2 + 9) + 3 * 6
3 * (4 * 4) + 6 * 2
6 * 9 + (3 + 9 * (8 * 6) + 8 + (9 + 7 * 2 + 9 + 5 + 4)) + 4 * (7 * (2 + 6))
(5 * 2 + 4 + (2 * 5 + 9) + 4) + 8 + (4 + 5 + 8 + 2) * 4 * 2 + 5
7 * 5 * 6 * 7 * 9 + ((6 * 4) * 9 * 6 * 4 * 8)
9 + 3 + 3 + 5 * 2 * 8
7 * (6 * 7 + (4 * 4 * 5 * 6 * 9) + 4 + 2 + (6 + 5 * 9 + 7 * 9 * 8)) + 9 * 2 * 9
8 * 7 + (6 * 9 * 6 + 4 + 5 + 5) * 7 * 9 + 2
(6 * 7) + 6 + 8 * (4 * 9 + (2 * 9 * 6 + 8))
(2 + 9 + 2 + (7 * 6 + 3) * (6 + 5 * 5 + 8 + 3)) * 9 + 9
(9 + 9 + 8 + 2 + 2) * 2 + 3 + 8
(4 * 4 * 5 * 9 + 2) * 5 + 9 * 5 + 9 * (9 * 5 + 8 * 8)
6 + 4 * (9 * (6 + 9 * 5)) * (5 * 7 * 8 + (3 * 4 * 3) + 5) * (2 * 7 * (5 * 2 * 3)) * 6
6 * 6 * ((5 + 9 * 4 * 9 * 4) + 5 + 3 + (3 + 6)) * 2
(7 + 8 * 5) * 9 * ((7 + 5 + 3 + 7) + 8) * (9 * 3 * 7 + 8 + 9 + 2) + 8 + (6 * (3 * 2))
5 + 6
(8 + 8 * 5 + 9 + (3 + 2 + 7 + 9) + 4) + 8 * (5 * 7 * 5 + 4 * 9) + 2 + 3
8 + 7
(4 + 4 + (5 + 2) * 8 * 6 + 7) * 6 * 6 + 9
2 * (5 * 2) * (4 * 3 + 2 + 5) + 7 + 7 + 9
6 * (3 + 4 * 3 * 4 + 5 * 9) * 9
3 * ((5 + 9 * 9) + 3 + 8)
7 * 6 * 8 + 6 * 5 + (9 + 2 * 2 * 6 + (8 * 3 * 7 + 6 + 7 * 5))
((7 * 6 + 4 + 2 + 8 + 7) + 7 * 2 * 3) + (3 * (7 + 3 * 6) + 5 + 6) * 8 * 9 * 6 + (9 + 5 * 9 + 3)
9 + 4 + ((8 + 5) * 9) * (4 + 5 + (7 * 5 + 2 * 3 + 3 * 7))
(9 + 4 + 6 + 3) * 5 * (3 * (5 * 7 + 8 + 6 * 9 * 9)) * 3 * 8 * ((4 + 6 + 3 * 3 * 4 + 6) * 5 + 2)
(9 + 4 * 7) + 2 + 7
2 + (8 + 3 + 2) + 5
3 + 5 * (8 + 6 * (6 + 3) * 7 + 7)
8 + (3 * 8 * (4 + 7 + 4) + (5 + 8) * 8 * 2) + 6
8 * 7 * (9 + 5 * 8 * (5 * 4 * 4 + 8 + 3) + 5)
2 * 6 + (7 * (8 * 4 + 3 * 2) + 7 * 2) * 6 + 6 * (8 * 5 + 7 + 6 * 9 * 9)
(4 * 9 * (7 * 3 + 9 + 7 * 7)) * 6 + 4
(4 + 6 * (6 + 7 + 6 * 5 * 7 * 9) + 5) * 2 + 2 * 5 + 9
9 * (4 * 2 * 2 + 6) + 6 + (8 * 6 + 3 * 5 * 7 * 4) * 5
5 * ((7 + 5 + 8 * 3) + 5 * 2 + 3)
(9 * 3 + 7 * 2) * 2 + 4
7 + 5 + (5 + 6 + (4 * 5 + 7 + 5 * 8) * 6 * (3 * 4 * 7 * 5 * 7 + 6) * 9) + (3 + 3) * 4
(5 + 3 * 7) * 9 + 4 + 5
3 * 3 + (9 * 3 + (6 + 4 + 4 * 6 * 4) * 6) + (2 * 6 + (3 + 7) + 7 * 9 * 6) + 5 + 6
2 * (5 + (8 * 7) * (7 + 3) * 7 * 9 + 4) * 6 + 6 * 5 * (3 + 5 * 3 * (2 * 9 * 7 * 6))
(3 * (2 + 9 + 8 * 4 + 6)) * 9 + 2 * 6 + (9 * 7)
(9 + (9 + 3 * 8) * 2 + 9) * 2 + (8 + 6 * (6 + 2 * 3 + 8 + 7)) * 4
5 + ((7 + 8 * 8 * 7 * 6 + 7) * 6 * 6 * 2)
(5 * 5 + 7 * 5 + (5 * 5 * 5)) + 9 * (2 * (4 + 3 + 5 + 2 + 3) + (7 + 3 + 6 * 4 * 9 + 7)) + 6 * 7 + (4 * (6 * 8) + (6 + 3 + 6 * 5) + 6 * 9 * (5 + 9 * 4 + 9 + 5))
(6 + (3 * 6) * 5) * 8 + 2 * 2
3 * 5 + ((5 + 6 * 8 * 2 * 7 * 9) * 2 + 4 * (3 * 5 * 8) * (9 + 6) + 5) * 5
8 * 7 + 9
(2 + 5 * (5 * 5) + 9 * 8) + 4 * 8 + 6
((7 + 6) + 6) * 2
9 * 9 + 8 * (3 + 9) + (5 + 7 * (5 * 6 * 9 * 9 * 3 + 2) * 9) + 5
6 + (2 * 7 + (4 * 6 * 3 * 6 + 3 * 3) + 9 * 4 + (8 + 7)) + 7 * 9 * (2 + 6 + 8) * ((8 * 5 + 9) * 8)
2 * (6 + 7 * 6 + (9 + 4 + 4 + 5 + 9) * 5) * 7 + 4
(2 + 6 + (7 * 6 * 7 * 8 * 6 + 6)) + 6 + 3 * 7 + (7 + 8 + 4 + 2)
((7 + 9 * 8) * 3) * 2 + 8
(6 + 3 * (8 + 4) * 3) * 5 * (5 * (8 * 7 * 7 * 6) * 8 + (8 * 8) + 7) + 9 * 8 + 8
4 + 3 * (5 + 7 + 7) + 6 * 7
7 + 5
5 * 7 * 8
((5 + 9 + 7) * 7 + 3 * 9 * 2 * 7) + 3 + 9 + (9 * 2 * (5 + 7) * (6 * 8) + (2 + 6)) + 6 + (2 * 5 + 3 * 2)
5 + (7 + 3 * 8 * 7) + 6 + 5 + 8 + ((7 * 4) + 2 + 5 + 5 * (5 + 3 + 3) + 9)
3 + (2 * (8 + 5 + 7 + 4) * 4 + 8 * 4 * 3)
(9 + 7 + (3 + 3 * 4 * 8 * 3 * 8)) + 9 * 5
9 + 4 + (3 * 4 * 7 + 3 + 5) + (9 * (6 * 2 * 2) + (8 + 2 + 8 + 7 + 2) + (7 + 6 + 7 + 9 * 2 * 6) + 9)
4 * ((7 * 4 * 9) * 6 * 4 * (7 + 8 * 8) + 7 * 6) + (5 + (8 * 3 * 8 + 9 * 8 * 4) * 9 * 5 * (6 * 4 * 5 * 7 * 4 * 6) + 9) + 2 * 3 + 2
2 * (2 * 3 + 4) + 5 * 7 * 7
(4 + 3 + 4) + 7 + 9 + 6 + ((7 * 4 * 8 + 9) + 6 + (4 + 3 * 2 * 5) * 2 * (9 + 8 + 8))
(5 + 3 + 8 + 9) + 6 * 4 * 3 + (4 + 9) * 7
3 * 2 * 3 + (8 + 9 * 5 * 3 + 6 + 7)
(5 * 5 * (7 + 3)) + 8 + 7
4 + 6 * 7 * ((2 + 2 * 8) * 3 + 2) * 5
5 * 2 + (4 + 4 * 6 * 9) + 7 + 7 * 4
9 + 9 * 9 * (7 + 6 + 4)
8 * 7 * 4 * ((9 + 6 * 3 * 4 * 6) + (5 * 4 + 8 * 3 + 2) + (6 * 6 + 3 + 3 * 4) * 7 + 3) + (2 * (9 * 3 + 7 * 7 + 3 * 6) * 6 + (7 * 5 * 3 + 6 + 5) + 4) + 5
6 * 7 * 5 + 4 * (3 + 2 * (7 * 5 * 4) * (3 + 6 + 7 * 4 + 2 + 6)) + 8
4 + ((8 * 8 + 5 * 9 + 8 + 6) * 4 * 5 + 2 + 4 * 5) * 3 + 5 + 8 * 6
4 * 6 * 4 * 7 * (3 * 3 * 3) + ((6 * 5 * 2 + 2) + 9 + 5 + 2 * 7 + (8 * 3 * 2 * 2 * 5))
9 * (7 * 8 * 7 + 8) * (7 * (7 * 2 + 5 + 9 * 2) * 9 * 9)
9 + (2 * 2) + 8 * 4 + (7 * 2 * 7 * 4) * 7
(6 * (6 + 6)) * ((7 * 8) * 9 + 9) * 4 * 4 + 8 * 3
7 + (8 + 9 * 8 * 3 + 3 + 3) + 7 * (9 + 3 + 4) + 4 + 8
3 + 8 + 5 * 5 * (2 * 6)
7 * 4 + 3 * ((8 * 5 * 6) + 6) * 5 * 4
(4 + (6 + 4 * 9 * 3) * 2 * 9 + 4) * 7 + 9 * 3 * 8
6 + 8 * ((6 + 7 + 2 + 5 + 8 * 9) + 3 + 9 * 3 * 7 + 6) + (9 * 8 + 2 * 4) + 8
9 + 6 * 2 + 3 + 7 + (2 + (8 * 3 + 3 * 7) * 4 + (7 + 4 + 7 + 3 + 4 * 9))
3 + (5 * (6 + 7 + 5 * 8)) * 2
2 * (2 + (8 * 3 * 9 + 6 * 8) + 8 * 2 * (6 + 4 + 7 * 9))
4 + (2 + 9 + 8) + 7 * 3
(2 * (7 + 2) + (5 * 5 * 2 * 6 * 4) + 6) + 8 + (7 + 4 * 3 * 3 * (6 + 3 * 9 * 6) + 8) * (4 + 2 * 9 + (2 + 7 + 7) + 7) + 6
(5 + 4 + 9) + 8 * 7 * (8 * 4) + (4 + 9 + 6)
8 * ((7 + 7 * 2 + 8) + 7 + 7 * (9 + 7) * 2 * (5 + 8 * 9 + 9 + 9)) * 7 * 4 + 9 * 4
8 * 5 * 3
9 + 2 * (5 + 4 * 6 * 5) + 8 * 5
5 * (9 + 3) * 7 + ((4 + 4 * 8) * (4 * 7) * (6 + 5) + 3) * 6 + 5
2 + (6 + 8 + 4 + 2 * 6) * (5 + 4)
7 * (6 + 5 * 6 * 5) * 5 * 6
(4 + 9) + 3 + ((8 + 5 * 2) * 4 + 2 * 4 * 4 * 4)
9 * ((4 + 4) * 3 + 9) + 9 + 2 + ((9 * 4 + 3 * 7 + 8) + 6 + (3 + 8)) * (7 * 4 * 2)
7 + (7 * 5) * (4 * 2 + 6 + 8 + 4 + 3) * 3
6 + 2 + 5 + 5 + ((4 * 4 + 2 + 9) * 2)
8 + 2 * 2 + 6 * 8
(3 + 5 + 4 * 5 + 6 + 4) * 2 + 5 * (5 + (6 + 7 * 2 + 8) + 5 + 9 * 7 + 3) * 4
9 * 3 + 5 + (6 + 3 + 6) * 8
((6 + 8 * 3 * 6) + 6 + (3 * 4 + 5) * 3) * ((3 * 5 * 8 * 5) + (7 + 3 + 5) + 2 * 8 * (4 * 5 * 4 + 3 + 2))
9 + ((6 + 3 * 3) + (3 * 2 + 4 + 4) * 8 + 2 + 4) * (4 * 8 * (6 + 2 * 9 + 4 * 9) + 9 * 9 * 6) * 2
((7 * 6 * 8 + 5 * 7 + 2) * 4 * 5 * (8 * 6) * 5 * 7) * 9 * ((6 * 9 + 5 + 2 * 6) + 4 * 7) + 5 * 4 * 9
5 * 3 + 8 + 3 * 6
4 + (7 * 2 + 3) + (7 + 4 + 8 * 4 * 2 * 5) * 5 * 9
9 * ((9 * 7 * 6 + 5 + 4) + 6 + 9 + 3 * 7) + 9 + 4 + 7 * 4
5 + (8 * 6 * 8 + 7 * 8 + (5 + 4 * 4)) + 8
(7 + 4 + 5 * (7 + 6 + 3 + 7) + (9 * 5 * 8)) * 6 + 5 + 2 * 5
(4 * 8 + 2 * 4) + 9 * ((7 + 7) * 2 + (5 + 8 + 6) + 2 + 9 + 8) + 3 * 7 * 4
3 + 5 + 6 * (5 * (4 + 5 + 9 + 4 * 9 + 9) + 6)
9 * (8 * 6 + 7 + 9 + 7) + 5 + 2 + (6 + (9 * 8 + 4 + 3 * 5 + 4) * (7 * 9 * 2 + 7 + 3 * 6) * 2 * 7 + 8)
7 * 4 * 2 * 5
6 * 8 + 7 + (4 * 2 + 4 + (5 + 7 * 3))
5 * 4 + (7 * (4 * 4) * 2) + 5
3 + 2 * 7 * 3 * (7 + 3 * 3) * 3
9 * 7 * 9 + 7 + ((7 + 5 * 4 + 8 + 9 + 2) * 9 + 6 + 2 * 9 * 7) * 2
8 + 3 * 5 * 4 * (2 + 7 + 4 * 4 + (6 + 3 * 2 + 4) * 2)
3 + 5 + 3 + 2 + 2 + 3
8 + (7 * (3 * 8 + 7 * 8) * 9) * (9 * 8 + 9 + 6 + 4)
5 * ((8 + 6 + 6 * 9 * 4) + 5 + 4 * 8 * 5) + (3 * 4 * 4 + (6 + 6 * 7)) + 2 + 2
(4 + 8) * 5 + 7 * 4 + 9 + 8
2 + 9 + (8 * 7 * 8 * 9 * (5 + 9 + 8)) + 7 * 9 * 4
8 * 2 + (3 + 7 + 4 * 6 + 8 + 3) * 5 * (3 * 4 + (3 + 6 + 4 * 7 * 3) * 2)
6 + (8 * 5 + 7) * 3 + 6 * 9 + (5 * 8 + 5 * 9)
(5 * (8 + 8 * 8 * 8 * 6 * 6) + 3 + 3 * 6 * 4) * 7 + 8 * 4 * (3 * 8 * 9 + 3 + 5 * 4)
4 * ((2 + 5) * 6 + 3 * 9 * 9 + (4 * 4 + 6 * 2))
4 * 8 * 2 * ((9 + 4 * 6 * 3 + 3) * (4 + 7 * 5 + 6 * 3) * 7 * 3 + (9 + 5)) + 5 * (3 + 3 * 9)
4 + 4 + (4 * (2 + 4 * 8 * 5) * 4 * (9 * 5 + 8 + 3)) * 4 * 9 + 5
2 + 6 + 4 + (3 + 4 + 8 + 3 + (9 + 3 + 8 + 7))
(9 * 5 + 5 * 9 * 9) + 9 * 7 * 5 + 7
8 * 3 + 8 + 8 + (5 + 7 + 3 + 6 + 6 + 3) * 3
(8 + (2 + 8 + 7 * 5 * 5)) * 5 * 4 + 9 * 6
(8 * 6 * 9 + 4) * 4
6 + 8 * 6 + 8
2 * (8 + 8 * 3 * 7) + (4 + 5) + 3
4 * 7 + (2 * (7 + 4 * 6) + 2 * 3 + 4 + (9 + 6 + 9 * 4)) * 6 * (3 * 9 * 8 * (4 + 2 * 8))
7 * 5 * 4 + 6 + 4 + (4 * 7 + (8 * 3 * 7 + 7 * 5 * 9) * 5 + (3 * 7) + 2)
4 + 6 * 5 + (3 * 9 + 3 + (8 * 3 * 8 + 2) + 5)
(5 * 5 + (9 * 8 + 9 + 4 * 4 + 4) + 5 * 9 * 3) + 8 + 3 * 6
8 + 4 + 7 * (2 * 8 + (4 * 2 + 6) * (4 + 6 + 5 * 9 * 8 * 8) + 9 + (9 * 8)) * 3
8 * 9 * 8 * (8 * 4 + 9 * 5 + 3)
9 * 9 + 5 + ((7 * 2 + 7 * 6) + 7 * 4 * 2 + 7)
(7 + (7 + 8 * 8) * 8) * 2 + 6 + 5 + 3
8 + 4 * 8 * 9 + (7 * 6 * 3 * 7 * 5)
(5 + 7 * (4 + 8 + 9 * 8 * 8 * 3) * 3) + (5 + (6 + 9 * 5) * 3 * 3 + 4 + (8 * 7 + 6 * 9 + 4))
(9 * (7 + 2) * 5) + 3 * 7 + 4 * 6 + 2
5 * ((7 * 3 + 8) * 9 * 8 + 8 + (9 + 7 + 5 + 8))
(3 * 6) * 2 * 5 * 4 + (5 * 7 * 3 * 2 + 4 * (7 * 8 * 8 + 5 + 3)) + 4`;

function partOne() {
    const questions = input.split("\n");
    let sumOfResults = 0;
    for (let i = 0; i < questions.length; i++) {
        sumOfResults += getResultLtr(questions[i]);
    }
    return sumOfResults;
}

function getResultLtr(textIn) {
    let textPos = 0;
    let lastValue = 0;
    let lastOperator = null;
    while (textPos < textIn.length) {
        if (textIn.substr(textPos, 1) == "(") { // find end, pass on
            let foundEndOfParentheses = false;
            let parenthesesLength = 1;
            let parenthesesNested = 1;
            while (!foundEndOfParentheses) {
                if (textIn.substr(textPos + parenthesesLength, 1) == "(") {
                    parenthesesNested++;
                } else if (textIn.substr(textPos + parenthesesLength, 1) == ")") {
                    parenthesesNested--;
                    if (parenthesesNested == 0) {
                        foundEndOfParentheses = true;
                        break;
                    }
                }
                parenthesesLength++;
            }
            const parenthesesResult = getResultLtr(textIn.substr(textPos + 1, parenthesesLength - 1));
            textIn = textIn.replace(textIn.substr(textPos, parenthesesLength + 1), parenthesesResult);
        } else if (textIn.substr(textPos, 1) == " ") {
            textPos++;
        } else if (textIn.substr(textPos, 1) == "+") {
            lastOperator = "add";
            textPos++;
        } else if (textIn.substr(textPos, 1) == "*") {
            lastOperator = "multiply";
            textPos++;
        } else if (!isNaN(textIn.substr(textPos, 1))) {
            let foundEndOfNumber = false;
            let numberLength = 1;
            while (!foundEndOfNumber) { // for numbers >9, replaced from parentheses
                if (textIn.substr(textPos + numberLength, 1) == " " || textPos + numberLength > textIn.length) {
                    foundEndOfNumber = true;
                } else {
                    numberLength++;
                }
            }
            const newValue = parseInt(textIn.substr(textPos, numberLength));
            if (lastOperator != null) {
                switch (lastOperator) {
                    case "add":
                        lastValue += newValue;
                        break;
                    case "multiply":
                        lastValue *= newValue;
                        break;
                }
            } else {
                lastValue = newValue;
            }
            textPos += numberLength;
        } else {
            throw "Unsupported character";
        }
    }
    return lastValue;
}

function partTwo() {
    const questions = input.split("\n");
    let sumOfResults = 0;
    for (let i = 0; i < questions.length; i++) {
        sumOfResults += getResultPlusFirst(questions[i]);
    }
    return sumOfResults;
}

function getResultPlusFirst(textIn) {
    let textPos = 0;
    while (textPos < textIn.length) {
        if (textIn.substr(textPos, 1) == "(") { // find end, pass on
            let foundEndOfParentheses = false;
            let parenthesesLength = 1;
            let parenthesesNested = 1;
            while (!foundEndOfParentheses) {
                if (textIn.substr(textPos + parenthesesLength, 1) == "(") {
                    parenthesesNested++;
                } else if (textIn.substr(textPos + parenthesesLength, 1) == ")") {
                    parenthesesNested--;
                    if (parenthesesNested == 0) {
                        foundEndOfParentheses = true;
                        break;
                    }
                }
                parenthesesLength++;
            }
            const parenthesesResult = getResultPlusFirst(textIn.substr(textPos + 1, parenthesesLength - 1));
            textIn = textIn.replace(textIn.substr(textPos, parenthesesLength + 1), parenthesesResult);
        } else if (textIn.substr(textPos, 1) == " "
            || textIn.substr(textPos, 1) == "+"
            || textIn.substr(textPos, 1) == "*"
            || !isNaN(textIn.substr(textPos, 1))) {
            // ignore for now, will be covered later once all parentheses are removed
            textPos++;
        } else {
            throw "Unsupported character";
        }
    }
    let textSplit = textIn.split(" * "); // this will create pairs with plusses in them, so that can be done first
    for (let i = 0; i < textSplit.length; i++) {
        textSplit[i] = getResultLtr(textSplit[i]); // no more parentheses or multiplication, so safe to use first interpretation
    }
    return getResultLtr(textSplit.join(" * ")); // now it should be either a single number or only multiplication
}

console.log(partOne());
console.log(partTwo());